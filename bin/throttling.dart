// import 'package:collection/collection.dart';
// import 'package:rxdart/rxdart.dart';
import 'package:throttling/throttling.dart';

void main(List<String> arguments) {
  /*
  final originalSample = [
    SampleStep(10, [1, 1, 1]),
    SampleStep(900, [2, 2, 2]),
    SampleStep(500, [3, 3, 3]),
    SampleStep(500, [4, 4, 4]),
    SampleStep(3000, [5, 5, 5]),
    SampleStep(500, [6, 6, 6]),
    SampleStep(500, [7, 7, 7]),
  ];

  final sampleStream = sampleStreamer(originalSample);
  print(DateTime.now());
  sampleStream.throttleTime(Duration(seconds: 1)).listen((data) {
    print(DateTime.now());
    print(data);
  });
  */

  final stagesSample = [
    SampleStep(1, [0xC5, 0x00, 0x41, 0x00, 0x35, 0x00, 0x00, 0x00]),
    SampleStep(839, [0x11, 0x00, 0x96, 0x00, 0x00]),
    SampleStep(967, [0xC5, 0x00, 0x45, 0x00, 0x41, 0x00, 0x00, 0x00]),
    SampleStep(533, [0x00, 0x00, 0xB5, 0x06]),
    SampleStep(1461, [0xC5, 0x00, 0x41, 0x00, 0x45, 0x00, 0x00, 0x00]),
    SampleStep(49, [0x11, 0x00, 0xA4, 0x00, 0x00]),
    SampleStep(1511, [0x00, 0x00, 0x83, 0x06]),
    SampleStep(197, [0xC5, 0x00, 0x43, 0x00, 0x4A, 0x00, 0x00, 0x00]),
    SampleStep(1315, [0x11, 0x00, 0xB2, 0x00, 0x00]),
    SampleStep(881, [0xC5, 0x00, 0x45, 0x00, 0x48, 0x00, 0x00, 0x00]),
    SampleStep(683, [0x00, 0x00, 0x1A, 0x07]),
    SampleStep(1314, [0xC5, 0x00, 0x64, 0x00, 0x5E, 0x00, 0x00, 0x00]),
    SampleStep(147, [0x11, 0x00, 0xC2, 0x00, 0x00]),
    SampleStep(342, [0xC5, 0x00, 0x72, 0x00, 0xBA, 0x00, 0x00, 0x00]),
    SampleStep(829, [0xC5, 0x00, 0x83, 0x00, 0x7B, 0x01, 0x00, 0x00]),
    SampleStep(392, [0x00, 0x00, 0xE9, 0x0D]),
    SampleStep(1360, [0xC5, 0x00, 0x9D, 0x00, 0x8E, 0x01, 0x00, 0x00]),
    SampleStep(100, [0x11, 0x00, 0xE0, 0x00, 0x00]),
    SampleStep(1362, [0xC5, 0x00, 0xA8, 0x00, 0xA9, 0x01, 0x00, 0x00]),
    SampleStep(150, [0x00, 0x00, 0x61, 0x10]),
    SampleStep(340, [0xC5, 0x00, 0xB6, 0x00, 0x5D, 0x02, 0x00, 0x00]),
    SampleStep(737, [0xC5, 0x00, 0xB7, 0x00, 0x08, 0x02, 0x00, 0x00]),
    SampleStep(529, [0x11, 0x00, 0x04, 0x01, 0x00]),
    SampleStep(683, [0xC5, 0x00, 0xA3, 0x00, 0x7F, 0x01, 0x00, 0x00]),
    SampleStep(243, [0xC5, 0x00, 0xA3, 0x00, 0x7E, 0x01, 0x00, 0x00]),
    SampleStep(537, [0x00, 0x00, 0x32, 0x0F]),
    SampleStep(488, [0xC5, 0x00, 0x8A, 0x00, 0x57, 0x01, 0x00, 0x00]),
    SampleStep(730, [0xC5, 0x00, 0x7C, 0x00, 0x33, 0x01, 0x00, 0x00]),
    SampleStep(244, [0x11, 0x00, 0x23, 0x01, 0x00]),
    SampleStep(1074, [0xC5, 0x00, 0x88, 0x00, 0x98, 0x01, 0x00, 0x00]),
    SampleStep(483, [0x00, 0x00, 0xA1, 0x0C]),
    SampleStep(298, [0xC5, 0x00, 0x7A, 0x00, 0x44, 0x01, 0x00, 0x00]),
    SampleStep(1216, [0xC5, 0x00, 0x6F, 0x00, 0x31, 0x01, 0x00, 0x00]),
    SampleStep(1, [0x11, 0x00, 0x3D, 0x01, 0x00]),
    SampleStep(1463, [0x00, 0x00, 0xA4, 0x0B]),
    SampleStep(487, [0xC5, 0x00, 0x7D, 0x00, 0x5F, 0x01, 0x00, 0x00]),
    SampleStep(976, [0xC5, 0x00, 0x7C, 0x00, 0xF0, 0x00, 0x00, 0x00]),
    SampleStep(48, [0x11, 0x00, 0x54, 0x01, 0x00]),
    SampleStep(1217, [0xC5, 0x00, 0x80, 0x00, 0xEF, 0x00, 0x00, 0x00]),
    SampleStep(340, [0xC5, 0x00, 0x87, 0x00, 0xF1, 0x00, 0x00, 0x00]),
    SampleStep(1, [0x00, 0x00, 0x69, 0x09]),
    SampleStep(635, [0xC5, 0x00, 0x90, 0x00, 0xF7, 0x00, 0x00, 0x00]),
    SampleStep(830, [0x11, 0x00, 0x69, 0x01, 0x00]),
    SampleStep(780, [0xC5, 0x00, 0xA2, 0x00, 0xF3, 0x00, 0x00, 0x00]),
    SampleStep(728, [0x00, 0x00, 0x4B, 0x0A]),
    SampleStep(1514, [0xC5, 0x00, 0x9C, 0x00, 0xB1, 0x00, 0x00, 0x00]),
    SampleStep(2, [0x11, 0x00, 0x80, 0x01, 0x00]),
    SampleStep(388, [0xC5, 0x00, 0x9C, 0x00, 0xC4, 0x00, 0x00, 0x00]),
    SampleStep(1071, [0xC5, 0x00, 0x9D, 0x00, 0xA8, 0x00, 0x00, 0x00]),
    SampleStep(50, [0x00, 0x00, 0xD4, 0x0B]),
    SampleStep(392, [0xC5, 0x00, 0xA2, 0x00, 0xDC, 0x00, 0x00, 0x00]),
    SampleStep(584, [0xC5, 0x00, 0xA3, 0x00, 0x03, 0x01, 0x00, 0x00]),
    SampleStep(536, [0x11, 0x00, 0x99, 0x01, 0x00]),
    SampleStep(146, [0xC5, 0x00, 0xA2, 0x00, 0xDB, 0x00, 0x00, 0x00]),
    SampleStep(729, [0xC5, 0x00, 0x99, 0x00, 0xCD, 0x00, 0x00, 0x00]),
    SampleStep(638, [0x00, 0x00, 0x50, 0x0D]),
    SampleStep(679, [0xC5, 0x00, 0x8A, 0x00, 0xAB, 0x00, 0x00, 0x00]),
    SampleStep(829, [0x11, 0x00, 0xB6, 0x01, 0x00]),
    SampleStep(97, [0xC5, 0x00, 0x87, 0x00, 0xF0, 0x00, 0x00, 0x00]),
    SampleStep(244, [0xC5, 0x00, 0x87, 0x00, 0xFC, 0x00, 0x00, 0x00]),
    SampleStep(1169, [0x00, 0x00, 0x62, 0x0C]),
    SampleStep(587, [0xC5, 0x00, 0x89, 0x00, 0x09, 0x01, 0x00, 0x00]),
    SampleStep(1023, [0x11, 0x00, 0xD0, 0x01, 0x00]),
    SampleStep(488, [0xC5, 0x00, 0x88, 0x00, 0xFC, 0x00, 0x00, 0x00]),
    SampleStep(537, [0xC5, 0x00, 0x90, 0x00, 0x1F, 0x01, 0x00, 0x00]),
    SampleStep(488, [0x00, 0x00, 0x2C, 0x0E]),
  ];

  Stream<List<int>> stagesStream = sampleStreamer(stagesSample);

  // groupFoldBy does nto work so far
  // Stream<Map<int, List<int>>>
  // var groupedStream = stagesStream.map<List<int>>((list) => list.groupFoldBy<int, List<int>>(keySelector,
  //         (List<int>? previous, List<int> element) => element));
  //
  // https://stackoverflow.com/a/66684643/292502
  // var groupedStream = stagesStream.map((list) => list.groupListsBy(keySelector));
  // groupedStream.throttleTime(Duration(seconds: 1)).listen((data) {
  //   print(DateTime.now());
  //   print(data);
  // });

  print(DateTime.now());
  Stream2ThrottledDeduplicatedStreamList(stagesStream, Duration(milliseconds: 500)).pumpStream().listen((data) {
    print(DateTime.now());
    print(data);
  });
}
